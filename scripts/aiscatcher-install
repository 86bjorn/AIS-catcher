#!/bin/bash

# Include and library directories
INCLUDE_DIRS_RTLSDR=("/usr/local/include" "/usr/include" "/opt/include" "/opt/local/include")
LIBRARY_DIRS_RTLSDR=("/usr/local/lib" "/usr/lib" "/opt/lib" "/opt/local/lib")
INCLUDE_DIRS_AIRSPY=("/usr/local/include" "/usr/include")
LIBRARY_DIRS_AIRSPY=("/usr/local/lib" "/usr/lib" "/opt/lib" "/opt/local/lib")
INCLUDE_DIRS_AIRSPYHF=("/usr/local/include" "/usr/include")
LIBRARY_DIRS_AIRSPYHF=("/usr/local/lib" "/usr/lib" "/opt/lib" "/opt/local/lib")
INCLUDE_DIRS_HACKRF=("/usr/include/libhackrf" "/usr/local/include" "/usr/include")
LIBRARY_DIRS_HACKRF=("/usr/local/lib" "/usr/lib" "/opt/lib" "/opt/local/lib")

install_librtlsdr_from_source() {
    git clone https://gitea.osmocom.org/sdr/rtl-sdr
    cd rtl-sdr/
    mkdir build
    cd build
    cmake ../
    make
    sudo make install
    sudo ldconfig
    cd ../..
}

install_package_apt() {
    local package_name=$1
    sudo apt-get update
    sudo apt-get install -y "$package_name"
}

# Generic function to check for a library
check_library() {
    local pkg_name=$1
    local header_name=$2
    local library_name=$3
    local include_dirs=("${!4}")
    local library_dirs=("${!5}")
    local install_func=$6

    if ! pkg-config --exists "$pkg_name"; then
        echo "pkg-config module for $pkg_name not found."

        local header_found=false
        local library_found=false

        for dir in "${include_dirs[@]}"; do
            if [[ -f "$dir/$header_name" ]]; then
                header_found=true
                break
            fi
        done

        for dir in "${library_dirs[@]}"; do
            if [[ -f "$dir/$library_name.so" || -f "$dir/$library_name.a" ]]; then
                library_found=true
                break
            fi
        done

        if [[ "$header_found" == true && "$library_found" == true ]]; then
            echo "$pkg_name header and library files found in include and library directories."
        else
            echo "$pkg_name header or library files not found. Installing..."
            $install_func
        fi
    else
        echo "pkg-config module for $pkg_name found."
    fi
}

install_SDR_libraries() {
    # Check and install librtlsdr from source
    check_library "librtlsdr" "rtl-sdr.h" "librtlsdr" INCLUDE_DIRS_RTLSDR[@] LIBRARY_DIRS_RTLSDR[@] install_librtlsdr_from_source

    # Check and install libairspy
    check_library "libairspy" "airspy.h" "libairspy" INCLUDE_DIRS_AIRSPY[@] LIBRARY_DIRS_AIRSPY[@] "install_package_apt libairspy-dev"

    # Check and install libairspyhf
    check_library "libairspyhf" "airspyhf.h" "libairspyhf" INCLUDE_DIRS_AIRSPYHF[@] LIBRARY_DIRS_AIRSPYHF[@] "install_package_apt libairspyhf-dev"

    # Check and install libhackrf
    check_library "libhackrf" "hackrf.h" "libhackrf" INCLUDE_DIRS_HACKRF[@] LIBRARY_DIRS_HACKRF[@] "install_package_apt libhackrf-dev"

    echo "All checks completed."
}

install_dependencies() {

  DEPS="git cmake build-essential pkg-config wget libzmq3-dev libssl-dev zlib1g-dev libzmq3-dev unzip"
  
  if [ -n "$DEPS" ]; then
    echo "Installing build dependencies: $DEPS"
    apt-get update
    apt-get install -y $DEPS
  fi
}


echo "All checks completed."


# Build the NMEA2000 library
build_nmea2000() {
  #git clone https://github.com/ttlappalainen/NMEA2000.git
  wget https://github.com/ttlappalainen/NMEA2000/archive/refs/heads/master.zip
  unzip master.zip  > /dev/null
  mv NMEA2000-master NMEA2000
  cd NMEA2000/src
  g++ -O3 -c N2kMsg.cpp N2kStream.cpp N2kMessages.cpp N2kTimer.cpp NMEA2000.cpp N2kGroupFunctionDefaultHandlers.cpp N2kGroupFunction.cpp -I.
  ar rcs libnmea2000.a *.o 
  cd ../..
}

# Build the AIS-catcher project
build_ais_catcher() {
  #git clone https://github.com/jvde-github/AIS-catcher.git
  wget https://github.com/jvde-github/AIS-catcher/archive/refs/heads/main.zip
  unzip main.zip  > /dev/null
  mv AIS-catcher-main AIS-catcher

  cd AIS-catcher
  
  mkdir build
  cd build
  cmake ..
  make
  cd ../..
}

# Copy executable and restart service if running
copy_and_restart_service() {
  SERVICE_NAME="ais-catcher.service"
  SERVICE_ACTIVE=false

  if systemctl is-active --quiet $SERVICE_NAME; then
    SERVICE_ACTIVE=true
    echo "Stopping $SERVICE_NAME..."
    systemctl stop $SERVICE_NAME
  fi

  echo "Copying AIS-catcher executable to /usr/bin"
  cp AIS-catcher/build/AIS-catcher /usr/bin

  if $SERVICE_ACTIVE; then
    echo "Starting $SERVICE_NAME..."
    systemctl start $SERVICE_NAME
  fi
}

# Setup systemd service
setup_systemd_service() {
  SERVICE_DIR="/etc/systemd/system"
  SERVICE_FILE="$SERVICE_DIR/ais-catcher.service"

  mkdir -p "$SERVICE_DIR"
  echo "[Unit]" > "$SERVICE_FILE"
  echo "Description=AIS-catcher Service" >> "$SERVICE_FILE"
  echo "After=network.target" >> "$SERVICE_FILE"
  echo "" >> "$SERVICE_FILE"
  echo "[Service]" >> "$SERVICE_FILE"
  echo "ExecStart=/bin/bash -c '/usr/bin/AIS-catcher -C /etc/AIS-catcher/config.json \$(/bin/grep -v \"^#\" /etc/AIS-catcher/config.cmd | /usr/bin/tr \"\\n\" \" \")'" >> "$SERVICE_FILE"
  echo "Restart=always" >> "$SERVICE_FILE"
  echo "" >> "$SERVICE_FILE"
  echo "[Install]" >> "$SERVICE_FILE"
  echo "WantedBy=multi-user.target" >> "$SERVICE_FILE"

  systemctl daemon-reload
  #systemctl enable ais-catcher.service
}

# Main script execution
echo "******************************************************"
echo "Starting AIS Catcher installation script via source..."
echo "******************************************************"

echo "******************************************************"
echo "Installing dependencies..............................."
echo "******************************************************"
# Install build dependencies
install_dependencies
install_SDR_libraries

# Setup configuration files
CONFIG_DIR="/etc/AIS-catcher"
CONFIG_FILE="$CONFIG_DIR/config.json"
CMD_FILE="$CONFIG_DIR/config.cmd"

mkdir -p "$CONFIG_DIR"
if [ ! -f "$CONFIG_FILE" ]; then
  echo "Creating config.json file..."
  echo '{ "config": "aiscatcher", "version": 1 }' > "$CONFIG_FILE"
fi
if [ ! -f "$CMD_FILE" ]; then
  echo "Creating config.cmd file..."
#!/bin/bash

# Ensure the directory exists
sudo mkdir -p /etc/ais-catcher

# Write the provided content to config.cmd
sudo bash -c "cat > $CMD_FILE" <<EOF
# after saving this file, run
# sudo systemctl restart ais-catcher.service
# to update the program. 

# select the device for decoding
-d:0
# or select via providing a serial number:
# -d serialxxxx

# Share your feed with the project site aiscatcher.org
-X
# Or get a sharing key at https://aiscatcher.org/addstation_ac and list your station in the station list:
# -X sharing_key

# ******************************************
# Defining Webviewer

# open a webviewer at port 8100:
-N 8100
# set your locacation and allow viewing in the webviewer:
# LAT 12.3 LON 4.3 SHARE_LOC ON


# ******************************************
# Sharing with commercial aggregators

# Share your data via UDP at IP address (127.0.0.1) and port (10110) (repeat as often as you want):
# -u 127.0.0.1 10110

# Share your data via UDP but reset the connection every 5 minutes to recover from any network issues
# -u 127.0.0.1 10110 RESET 5

# Share your data as a TCP client with IP address and port (repeat as often as you want):
# -P IP port

# Set up a TCP listening server at port, e.g. 5012:
# -S 5012
EOF

echo "Config file created at $CMD_FILE"

fi

echo "******************************************************"
echo "Building from source.................................."
echo "******************************************************"

# Create a temporary directory for building the projects
TMP_DIR=$(mktemp -d -t AIS-catcher-XXXXXX)
echo "Created temporary directory $TMP_DIR"
cd "$TMP_DIR"

# Build the NMEA2000 library and project
build_nmea2000

# Build the AIS-catcher project
build_ais_catcher

echo "******************************************************"
echo "Setup System Service.................................."
echo "******************************************************"

# Setup systemd service
setup_systemd_service

# Copy executable and restart service if necessary
copy_and_restart_service

# Cleanup temporary directory
cd ..
rm -rf "$TMP_DIR"
echo "Temporary directory $TMP_DIR deleted."

echo "AIS Catcher installation script finished."
