#!/usr/bin/env bash

set -euo pipefail

# Constants
readonly SCRIPT_NAME=$(basename "$0")
readonly LOG_FILE="/var/log/${SCRIPT_NAME%.*}.log"
readonly TMP_DIR=$(mktemp -d -t AIS-catcher-XXXXXX)
readonly CONFIG_DIR="/etc/AIS-catcher"
readonly CONFIG_FILE="${CONFIG_DIR}/config.json"
readonly CMD_FILE="${CONFIG_DIR}/config.cmd"
readonly SERVICE_NAME="ais-catcher.service"
readonly SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}"

# SDR library paths
readonly INCLUDE_DIRS=("/usr/local/include" "/usr/include" "/opt/include" "/opt/local/include")
readonly LIBRARY_DIRS=("/usr/local/lib" "/usr/lib" "/opt/lib" "/opt/local/lib")

# Logger function
log() {
    local level="$1"
    shift
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] [${level}] $*" | tee -a "$LOG_FILE"
}

# Error handler
error_exit() {
    log "ERROR" "$1"
    exit 1
}

# Cleanup function
cleanup() {
    log "INFO" "Cleaning up temporary directory ${TMP_DIR}"
    rm -rf "$TMP_DIR"
}

# Install dependencies
install_dependencies() {
    local deps="git cmake build-essential pkg-config libzmq3-dev libssl-dev zlib1g-dev libpq-dev libzmq3-dev unzip libusb-1.0-0-dev"
    log "INFO" "Installing build dependencies: $deps"
    sudo apt-get update || error_exit "Failed to update package lists"
    sudo apt-get install -y $deps || error_exit "Failed to install dependencies"
}

# Check for library
check_library() {
    local lib_name="$1"
    local header_name="$2"
    local lib_file="$3"

    log "INFO" "Checking for ${lib_name}"

    if pkg-config --exists "${lib_name}"; then
        log "INFO" "${lib_name} found via pkg-config"
        return 0
    fi

    local header_found=false
    local library_found=false

    for dir in "${INCLUDE_DIRS[@]}"; do
        if [[ -f "${dir}/${header_name}" ]]; then
            header_found=true
            break
        fi
    done

    for dir in "${LIBRARY_DIRS[@]}"; do
        if [[ -f "${dir}/${lib_file}.so" || -f "${dir}/${lib_file}.a" ]]; then
            library_found=true
            break
        fi
    done

    if [[ "$header_found" == true && "$library_found" == true ]]; then
        log "INFO" "${lib_name} found in system directories"
        return 0
    else
        log "WARN" "${lib_name} not found"
        return 1
    fi
}

# Install librtlsdr from source
install_librtlsdr_from_source() {
    log "INFO" "Installing librtlsdr from source"
    git clone https://gitea.osmocom.org/sdr/rtl-sdr || error_exit "Failed to clone rtl-sdr repository"
    cd rtl-sdr || error_exit "Failed to change directory to rtl-sdr"
    mkdir build && cd build || error_exit "Failed to create and enter build directory"
    cmake ../ -DINSTALL_UDEV_RULES=ON  -DDETACH_KERNEL_DRIVER=ON|| error_exit "Failed to run cmake"
    make || error_exit "Failed to build rtl-sdr"
    sudo make install || error_exit "Failed to install rtl-sdr"
    sudo cp ../rtl-sdr.rules /etc/udev/rules.d/ || error_exit "Failed to copy udev rules"
    sudo ldconfig || error_exit "Failed to run ldconfig"
    cd ../.. || error_exit "Failed to return to parent directory"
}

# Install SDR libraries
install_sdr_libraries() {
    local libraries=(
        "librtlsdr:rtl-sdr.h:librtlsdr"
        "libairspy:airspy.h:libairspy"
        "libairspyhf:airspyhf.h:libairspyhf"
        "libhackrf:hackrf.h:libhackrf"
    )

    for lib_info in "${libraries[@]}"; do
        IFS=':' read -r lib_name header lib_file <<< "$lib_info"
        if ! check_library "$lib_name" "$header" "$lib_file"; then
            case "$lib_name" in
                librtlsdr)
                    install_librtlsdr_from_source
                    ;;
                *)
                    log "INFO" "Installing ${lib_name}-dev"
                    sudo apt-get install -y "${lib_name}-dev" || error_exit "Failed to install ${lib_name}-dev"
                    ;;
            esac
        fi
    done
}

# Build AIS-catcher
build_ais_catcher() {
    log "INFO" "Building AIS-catcher"

git clone https://github.com/jvde-github/AIS-catcher.git --depth 1 || error_exit "Failed to download AIS-catcher"
cd AIS-catcher
./scripts/build-NMEA2000.sh
cd ..
}

# Setup configuration
setup_configuration() {
    log "INFO" "Setting up configuration files"
    sudo mkdir -p "$CONFIG_DIR" || error_exit "Failed to create config directory"
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo '{ "config": "aiscatcher", "version": 1 }' | sudo tee "$CONFIG_FILE" > /dev/null || error_exit "Failed to create config.json"
    fi
    
    if [[ ! -f "$CMD_FILE" ]]; then
        cat << EOF | sudo tee "$CMD_FILE" > /dev/null || error_exit "Failed to create config.cmd"
# AIS-catcher configuration
# Uncomment and modify options as needed

# Select device for decoding
-d:0

# Share feed with aiscatcher.org
-X

# Open webviewer at port 8100
-N 8100

# Uncomment to set location and allow viewing in webviewer
# LAT 12.3 LON 4.3 SHARE_LOC ON

# Uncomment and add to share data via UDP
# -u 127.0.0.1 10110

# Uncomment and add to share data via TCP
# -P 127.0.0.1 10111

# Uncomment to set up a TCP listening server
# -S 5012
EOF
    fi
}

# Setup systemd service
setup_systemd_service() {
    log "INFO" "Setting up systemd service"
    cat << EOF | sudo tee "$SERVICE_FILE" > /dev/null || error_exit "Failed to create service file"
[Unit]
Description=AIS-catcher Service
After=network.target

[Service]
ExecStart=/bin/bash -c '/usr/bin/AIS-catcher -C ${CONFIG_FILE} \$(/bin/grep -v "^#" ${CMD_FILE} | /usr/bin/tr "\n" " ")'
Restart=always

[Install]
WantedBy=multi-user.target
EOF

    sudo systemctl daemon-reload || error_exit "Failed to reload systemd"
}


copy_and_restart_service() {
    log "INFO" "Copying AIS-catcher executable and managing service"
    local was_active=false
    local was_enabled=false

    if systemctl is-active --quiet "$SERVICE_NAME"; then
        was_active=true
        sudo systemctl stop "$SERVICE_NAME" || log "WARN" "Failed to stop $SERVICE_NAME"
    fi

    if systemctl is-enabled --quiet "$SERVICE_NAME"; then
        was_enabled=true
    fi

    sudo cp AIS-catcher/build/AIS-catcher /usr/bin || error_exit "Failed to copy AIS-catcher executable"

    if [[ "$was_active" == true ]]; then
        sudo systemctl start "$SERVICE_NAME" || error_exit "Failed to start $SERVICE_NAME"
    fi

    if [[ "$was_enabled" == true ]]; then
        sudo systemctl enable "$SERVICE_NAME" || error_exit "Failed to enable $SERVICE_NAME"
    fi
}


# Main function
main() {
    log "INFO" "Starting AIS-catcher installation script"
    
    trap cleanup EXIT
    
    cd "$TMP_DIR" || error_exit "Failed to change to temporary directory"
    
    install_dependencies
    install_sdr_libraries
    build_ais_catcher
    setup_configuration
    setup_systemd_service
    copy_and_restart_service
    
    log "INFO" "AIS-catcher installation completed successfully"
}

# Run the script
main "$@"
