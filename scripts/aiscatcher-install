#!/usr/bin/env bash

set -euo pipefail

# Constants
readonly SCRIPT_NAME=$(basename "$0")
readonly LOG_FILE="/var/log/${SCRIPT_NAME%.*}.log"
readonly TMP_DIR=$(mktemp -d -t AIS-catcher-XXXXXX)
readonly CONFIG_DIR="/etc/AIS-catcher"
readonly PLUGIN_DIR="${CONFIG_DIR}/plugins"
readonly CONFIG_FILE="${CONFIG_DIR}/config.json"
readonly CMD_FILE="${CONFIG_DIR}/config.cmd"
readonly SERVICE_NAME="ais-catcher.service"
readonly SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}"

# SDR library paths
readonly INCLUDE_DIRS=("/usr/local/include" "/usr/include" "/opt/include" "/opt/local/include")
readonly LIBRARY_DIRS=("/usr/local/lib" "/usr/lib" "/opt/lib" "/opt/local/lib")

# Logger function
log() {
    local level="$1"
    shift
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] [${level}] $*" | tee -a "$LOG_FILE"
}

# Error handler
error_exit() {
    log "ERROR" "$1"
    exit 1
}

# Cleanup function
cleanup() {
    log "INFO" "Cleaning up temporary directory ${TMP_DIR}"
    rm -rf "$TMP_DIR"
}


# Function to get Debian/Ubuntu version and architecture
get_system_info() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$ID
        VERSION=$VERSION_CODENAME
    else
        OS=$(uname -s)
        VERSION=$(uname -r)
    fi
    ARCH=$(dpkg --print-architecture)
    
    echo "${OS}_${VERSION}_${ARCH}"
}


# Install dependencies
install_dependencies() {
    local deps="git cmake build-essential pkg-config libzmq3-dev libssl-dev zlib1g-dev libpq-dev libzmq3-dev unzip libusb-1.0-0-dev"
    log "INFO" "Installing build dependencies: $deps"
    apt-get install -y $deps || error_exit "Failed to install dependencies"
}

# Function to check if a package is available
check_package_availability() {
    local system_info=$1
    local packages=(
        "ais-catcher_debian_bookworm_amd64.deb"
        "ais-catcher_debian_bookworm_arm64.deb"
        "ais-catcher_debian_bookworm_armhf.deb"
        "ais-catcher_debian_bullseye_amd64.deb"
        "ais-catcher_debian_bullseye_arm64.deb"
        "ais-catcher_debian_bullseye_armhf.deb"
        "ais-catcher_debian_buster_amd64.deb"
        "ais-catcher_debian_buster_arm64.deb"
        "ais-catcher_debian_buster_armhf.deb"
        "ais-catcher_ubuntu_focal_amd64.deb"
        "ais-catcher_ubuntu_focal_arm64.deb"
        "ais-catcher_ubuntu_jammy_amd64.deb"
        "ais-catcher_ubuntu_jammy_arm64.deb"
        "ais-catcher_ubuntu_mantic_amd64.deb"
        "ais-catcher_ubuntu_mantic_arm64.deb"
        "ais-catcher_ubuntu_noble_amd64.deb"
        "ais-catcher_ubuntu_noble_arm64.deb"
    )

    for package in "${packages[@]}"; do
        if [[ $package == *"$system_info"* ]]; then
            echo "$package"
            return 0
        fi
    done

    return 1
}

# Check for library
check_library() {
    local lib_name="$1"
    local header_name="$2"
    local lib_file="$3"

    log "INFO" "Checking for ${lib_name}"

    if pkg-config --exists "${lib_name}"; then
        log "INFO" "${lib_name} found via pkg-config"
        return 0
    fi

    local header_found=false
    local library_found=false

    for dir in "${INCLUDE_DIRS[@]}"; do
        if [[ -f "${dir}/${header_name}" ]]; then
            header_found=true
            break
        fi
    done

    for dir in "${LIBRARY_DIRS[@]}"; do
        if [[ -f "${dir}/${lib_file}.so" || -f "${dir}/${lib_file}.a" ]]; then
            library_found=true
            break
        fi
    done

    if [[ "$header_found" == true && "$library_found" == true ]]; then
        log "INFO" "${lib_name} found in system directories"
        return 0
    else
        log "WARN" "${lib_name} not found"
        return 1
    fi
}

# Install librtlsdr from source
install_librtlsdr_from_source() {
    log "INFO" "Installing librtlsdr from source"
    git clone https://gitea.osmocom.org/sdr/rtl-sdr --depth 1 || error_exit "Failed to clone rtl-sdr repository"
    cd rtl-sdr || error_exit "Failed to change directory to rtl-sdr"
    mkdir build && cd build || error_exit "Failed to create and enter build directory"
    cmake ../ -DINSTALL_UDEV_RULES=ON  -DDETACH_KERNEL_DRIVER=ON|| error_exit "Failed to run cmake"
    make || error_exit "Failed to build rtl-sdr"
    make install || error_exit "Failed to install rtl-sdr"
    cp ../rtl-sdr.rules /etc/udev/rules.d/ || error_exit "Failed to copy udev rules"
    ldconfig || error_exit "Failed to run ldconfig"
    cd ../.. || error_exit "Failed to return to parent directory"
}

# Install SDR libraries
install_sdr_libraries() {
    local libraries=(
        "librtlsdr:rtl-sdr.h:librtlsdr"
        "libairspy:airspy.h:libairspy"
        "libairspyhf:airspyhf.h:libairspyhf"
        "libhackrf:hackrf.h:libhackrf"
    )

    for lib_info in "${libraries[@]}"; do
        IFS=':' read -r lib_name header lib_file <<< "$lib_info"
        if ! check_library "$lib_name" "$header" "$lib_file"; then
            case "$lib_name" in
                librtlsdr)
                    install_librtlsdr_from_source
                    ;;
                *)
                    log "INFO" "Installing ${lib_name}-dev"
                    apt-get install -y "${lib_name}-dev" || error_exit "Failed to install ${lib_name}-dev"
                    ;;
            esac
        fi
    done
}

# Build AIS-catcher
build_ais_catcher() {
    log "INFO" "Building AIS-catcher"

    git clone https://github.com/jvde-github/AIS-catcher.git --depth 1 || error_exit "Failed to download AIS-catcher"
    cd AIS-catcher
    ./scripts/build-NMEA2000.sh
    cd ..
    cp AIS-catcher/build/AIS-catcher /usr/bin || error_exit "Failed to copy AIS-catcher executable"
}

install_plugins() {
    log "INFO" "Installing plugins"
    mkdir -p "$PLUGIN_DIR" || error_exit "Failed to create plugin directory"
    cp AIS-catcher/plugins/* "$PLUGIN_DIR" || error_exit "Failed to copy plugins"
}

download_webassets() {
    local webassets_url="https://github.com/jvde-github/webassets/archive/refs/heads/main.zip"
    local temp_zip="/tmp/webassets.zip"
    
    log "INFO" "Downloading webassets"
    if wget -q "$webassets_url" -O "$temp_zip"; then
        if [[ -d "$CONFIG_DIR/webassets" ]]; then
            log "INFO" "Removing old webassets"
            sudo rm -rf "$CONFIG_DIR/webassets"
        fi
        
        log "INFO" "Extracting webassets"
        sudo unzip -q "$temp_zip" -d "$CONFIG_DIR"
        sudo mv "$CONFIG_DIR/webassets-main" "$CONFIG_DIR/webassets"
        rm "$temp_zip"
        
        log "INFO" "Webassets updated successfully"
    else
        log "ERROR" "Failed to download webassets"
        return 1
    fi
}

# Setup configuration
setup_configuration() {
    log "INFO" "Setting up configuration files"
    mkdir -p "$CONFIG_DIR" || error_exit "Failed to create config directory"

    download_webassets || error_exit "Failed to download webassets"


    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo '{ "config": "aiscatcher", "version": 1, "sharing": true }' | tee "$CONFIG_FILE" > /dev/null || error_exit "Failed to create config.json"
    fi
    
    if [[ ! -f "$CMD_FILE" ]]; then
        cat << EOF | tee "$CMD_FILE" > /dev/null || error_exit "Failed to create config.cmd"
# AIS-catcher configuration
# Uncomment and modify options as needed

# Select device for decoding
# -d:0

# Share feed with aiscatcher.org, add UUID from aiscatcher.org (optional)
# -X

# Open webviewer at port 8100
# -N 8100 CDN ${CONFIG_DIR}/webassets

# Uncomment to set location and allow viewing in webviewer
# LAT 12.3 LON 4.3 SHARE_LOC ON

# Uncomment and add to share data via UDP (multiple allowed)
# -u 127.0.0.1 10110

# Uncomment and add to share data via TCP
# -P 127.0.0.1 10111

# Uncomment to set up a TCP listening server
# -S 5012
EOF
    fi
}

# Setup systemd service
setup_systemd_service() {
    log "INFO" "Setting up systemd service"
    cat << EOF | tee "$SERVICE_FILE" > /dev/null || error_exit "Failed to create service file"
[Unit]
Description=AIS-catcher Service
After=network.target

[Service]
ExecStart=/bin/bash -c '/usr/bin/AIS-catcher -C ${CONFIG_FILE} \$(/bin/grep -v "^#" ${CMD_FILE} | /usr/bin/tr "\n" " ")'
Restart=always
RestartSec=10
StartLimitBurst=0

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload || error_exit "Failed to reload systemd"
}


install_from_package() {
    local package=$1
    local download_url="https://github.com/jvde-github/AIS-catcher/releases/download/Edge/$package"
   
    log "INFO" "Installing AIS-catcher from package: $package"

    # Create a temporary directory with appropriate permissions
    local temp_dir=$(mktemp -d)
    chmod 755 "$temp_dir"

    # Download the package
    log "INFO" "Downloading package..."
    if ! wget -q -P "$temp_dir" "$download_url"; then
        error_exit "Failed to download package"
    fi

    # Ensure the downloaded file has correct permissions
    chmod 644 "$temp_dir/$package"

    # Install the package and dependencies using apt
    log "INFO" "Installing package and dependencies..."
    if ! apt update; then
        error_exit "Failed to update package lists"
    fi

    if ! apt install -y "$temp_dir/$package"; then
        error_exit "Failed to install package"
    fi

    # Clean up
    log "INFO" "Cleaning up..."
    rm -rf "$temp_dir" || log "WARN" "Failed to remove temporary directory: $temp_dir"

    log "INFO" "AIS-catcher installation completed"
}

SERVICE_STATE=""

# Function to stop the service and save its state
stop_disable_and_save_service_state() {
    log "INFO" "Checking AIS-catcher service state, stopping if active, and disabling"
    local was_active=false
    local was_enabled=false

    # Check if the service is active
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        was_active=true
        log "INFO" "$SERVICE_NAME is active, attempting to stop"
        systemctl stop "$SERVICE_NAME"
        
        # Verify that the service has actually stopped
        if systemctl is-active --quiet "$SERVICE_NAME"; then
            log "WARN" "Failed to stop $SERVICE_NAME"
        else
            log "INFO" "$SERVICE_NAME stopped successfully"
        fi
    else
        log "INFO" "$SERVICE_NAME is not active, no need to stop"
    fi

    # Check if the service is enabled
    if systemctl is-enabled --quiet "$SERVICE_NAME"; then
        was_enabled=true
        log "INFO" "$SERVICE_NAME is enabled, attempting to disable"
        systemctl disable "$SERVICE_NAME"
        
        # Verify that the service has actually been disabled
        if systemctl is-enabled --quiet "$SERVICE_NAME"; then
            log "WARN" "Failed to disable $SERVICE_NAME"
        else
            log "INFO" "$SERVICE_NAME disabled successfully"
        fi
    else
        log "INFO" "$SERVICE_NAME is not enabled, no need to disable"
    fi

    # Save the state to the global variable
    SERVICE_STATE="${was_active},${was_enabled}"
    log "INFO" "Service state saved: $SERVICE_STATE"
}


# Function to restore the service state
restore_service_state() {
    log "INFO" "Restoring AIS-catcher service state"
    
    IFS=',' read -ra STATE_ARRAY <<< "$SERVICE_STATE"
    local was_active=${STATE_ARRAY[0]}
    local was_enabled=${STATE_ARRAY[1]}
    
    if [[ "$was_active" == true ]]; then
        systemctl start "$SERVICE_NAME" || error_exit "Failed to start $SERVICE_NAME"
    fi
    
    if [[ "$was_enabled" == true ]]; then
        systemctl enable "$SERVICE_NAME" || error_exit "Failed to enable $SERVICE_NAME"
    fi
    
    # Clear the global state after restore
    SERVICE_STATE=""
    log "INFO" "Service state restored and cleared"
}

# Main function
main() {
    log "INFO" "Starting AIS-catcher installation script"
    
    trap cleanup EXIT
    
    sudo apt-get update || error_exit "Failed to update package lists"

    cd "$TMP_DIR" || error_exit "Failed to change to temporary directory"

    local system_info=$(get_system_info)
    log "INFO" "Detected system: $system_info"
    
    local package=$(check_package_availability "$system_info")
    if [ $? -eq 0 ]; then
        log "INFO" "Package available: $package"
    else
        log "WARN" "No package available for this system"
    fi

    # Check for -p flag
    if [[ "$@" == *"-p"* ]]; then
        if [ -n "$package" ]; then
            stop_disable_and_save_service_state
            install_from_package "$package"
            log "INFO" "AIS-catcher installation from package completed successfully"
        else
            error_exit "Package installation requested but no package available for this system"
        fi
    else
        log "INFO" "AIS-catcher installation from source"
        install_dependencies
        install_sdr_libraries
        stop_disable_and_save_service_state
        build_ais_catcher

        cp AIS-catcher/build/AIS-catcher /usr/bin || error_exit "Failed to copy AIS-catcher executable"
        install_plugins
    fi
    setup_configuration
    setup_systemd_service        
    restore_service_state
    
    log "INFO" "AIS-catcher installation completed successfully"
}

# Run the script
main "$@"
